//---------------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: DoD1_2_zim.bt
//   Authors: Surihix
//   Version: 1.1
//   Purpose: Parse Drakengard 1 & 2's .zim image files
//  Category: zim files
// File Mask: *.zim
//  ID Bytes: 77 5A 49 4D 64
//   History: 
//   1.0   2024-03-14 Surihix: Initial version
//   1.1   2025-06-24 Surihix: Rearranged all structs
//---------------------------------------------------------

LittleEndian();

typedef struct HEADER
{
    char magic[5]<bgcolor=cDkGreen>;
    Assert(magic == "wZIMd");

    ubyte reserved[3]<bgcolor=cBlack>;
    uint32 unkVal<bgcolor=cRed>;
    uint32 unkVal2<bgcolor=cRed>;
    uint32 pqrsPixelDataInfoChunkOffset<bgcolor=cDkGreen>;
    uint32 pqrsPaletteDataInfoChunkOffset<bgcolor=cDkGreen>;
    uint32 flagAndOffsetTableOffset<bgcolor=cDkGreen>;
    ubyte reserved2[4]<bgcolor=cBlack>;
}Header;


typedef struct PQRSPIXELDATAINFOCHUNK
{
    uint32 pqrsPixelSectionOffset<bgcolor=0xbf6b6c>;
    ubyte reserved[4]<bgcolor=cBlack>;
    uint32 unkVal<bgcolor=cRed>;
    uint16 imgWidth<bgcolor=0xbf6b6c>;
    uint16 imgHeight<bgcolor=0xbf6b6c>;
    ubyte reserved2[4]<bgcolor=cBlack>;
    uint32 pixelDataSize<bgcolor=0xbf6b6c>;
    uint32 unkVal2<bgcolor=cRed>;
    uint32 unkVal3<bgcolor=cRed>;
    uint32 unkVal4<bgcolor=cRed>;
    ubyte reserved3[4]<bgcolor=cBlack>;
}PQRSPixelDataInfoChunk;


typedef struct PQRSPALETTEDATAINFOCHUNK
{
    uint32 pqrsPaletteSectionOffset<bgcolor=0xbf6b6c>;
    uint32 paletteDataSize<bgcolor=0xbf6b6c>;
    ubyte reserved[2]<bgcolor=cBlack>;
    ubyte bppFlag<bgcolor=0xbf6b6c, comment="48 = 8bit image & 64 = 4bit image">;
    ubyte unkFlag<bgcolor=cRed>;
    uint32 unkVal<bgcolor=cRed>;
    ubyte reserved2[40]<bgcolor=cBlack>;
}PQRSPaletteDataInfoChunk;


typedef struct FLAGOFFSETTABLE
{
    ubyte reserved[3]<bgcolor=cBlack>;
    ubyte pqrsSectionFlag1<bgcolor=cDkGreen>;
    uint32 pqrsPixelSectionOffset<bgcolor=cDkGreen>;
    ubyte reserved2[11]<bgcolor=cBlack>;
    ubyte pqrsSectionFlag2<bgcolor=cDkGreen>;
    uint32 pqrsPaletteSectionOffset<bgcolor=cDkGreen>;
    ubyte reserved3[11]<bgcolor=cBlack>;    
    ubyte pqrsSectionFlag3<bgcolor=cDkGreen, comment="repeated">;
    uint32 pqrsPixelSectionOffset2<bgcolor=cDkGreen, comment="repeated">;
    ubyte reserved4[11]<bgcolor=cBlack>;
    ubyte pqrsSectionFlag4<bgcolor=cDkGreen, comment="repeated">;
    uint32 pqrsPaletteSectionOffset3<bgcolor=cDkGreen, comment="repeated">;
    ubyte reserved5[8]<bgcolor=cBlack>;
}FlagOffsetTable;


typedef struct PQRSHeader
{
    ubyte unkPQRSdata[96]<bgcolor=cRed>;
    uint32 dataWidth<bgcolor=0x6213a2>;
    uint32 dataHeight<bgcolor=0x6213a2>;
    ubyte unkPQRSdata2[56]<bgcolor=cRed>;
}pqrsHeader;


struct FILE
{
    Header header<name="Header", open=true>;

    // PQRS Pixel DataInfo Chunk
    if (FTell() != header.pqrsPixelDataInfoChunkOffset)
    {
       local int paddingSize = header.pqrsPixelDataInfoChunkOffset - FTell();
       ubyte paddingTillPixelDataInfoChunk[paddingSize]<bgcolor=cBlack>;
    }
    
    PQRSPixelDataInfoChunk pqrsPixelDataInfoChunk<name="PQRS Pixel DataInfo Chunk">;


    // PQRS Palette DataInfo Chunk
    if (FTell() != header.pqrsPaletteDataInfoChunkOffset)
    {
       local int paddingSize = header.pqrsPaletteDataInfoChunkOffset - FTell();
       ubyte paddingTillPalettaDataInfoChunk[paddingSize]<bgcolor=cBlack>;
    }

    PQRSPaletteDataInfoChunk pqrsPaletteDataInfoChunk<name="PQRS Palette DataInfo Chunk">;


    // FlagOffsetTable
    if (FTell() != header.flagAndOffsetTableOffset)
    {
       local int paddingSize = header.flagAndOffsetTableOffset - FTell();
       ubyte paddingTillFlagAndOffsetTable[paddingSize]<bgcolor=cBlack>;
    }

    FlagOffsetTable flagOffsetTable<name="FlagOffsetTable">;


    // PQRS Pixel Section
    if (FTell() != flagOffsetTable.pqrsPixelSectionOffset)
    {
       local int paddingSize = flagOffsetTable.pqrsPixelSectionOffset - FTell();
       ubyte paddingTillPQRSPixelSection[paddingSize]<bgcolor=cBlack>;
    }   
    
    pqrsHeader pqrsPixelSection<name="PQRS Pixel Section">;
    ubyte pixelData[pqrsPixelDataInfoChunk.pixelDataSize]<bgcolor=cLtGreen>;
    

    // PQRS Palette Section
    if (FTell() != flagOffsetTable.pqrsPaletteSectionOffset)
    {
       local int paddingSize = flagOffsetTable.pqrsPaletteSectionOffset - FTell();
       ubyte paddingTillPQRSPaletteSection[paddingSize]<bgcolor=cBlack>;
    }

    pqrsHeader pqrsPaletteSection<name="PQRS Palette Section">;
    ubyte paletteData[pqrsPaletteDataInfoChunk.paletteDataSize]<bgcolor=cLtGreen, comment="bppFlag 48 = swizzled palette data">;

}zimFile<open=true, name="ZIM file">;